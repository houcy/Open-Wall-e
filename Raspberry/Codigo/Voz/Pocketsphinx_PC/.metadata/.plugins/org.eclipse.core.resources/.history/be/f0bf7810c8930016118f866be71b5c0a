//============================================================================
// Name        : Reconocimiento_voz.cpp
// Author      : Maximo Fernandez Nuñez
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <pocketsphinx.h>
#include "../Resources/Defines.h"
#include "../Resources/Resources.h"
#include "Utilities.h"
//#include <sphinxbase/err.h>
//#include <sphinxbase/ad.h>
//#include <stdio.h>
//#include <string.h>
//#include <assert.h>
//#include <sys/select.h>
//#include "pocketsphinx.h"
using namespace std;

static cmd_ln_t *config;
//static ps_decoder_t *ps;
//static FILE *rawfd;

static const arg_t cont_args_def[] = {
	POCKETSPHINX_OPTIONS,
    /* Argument file. */
    {"-argfile", ARG_STRING, NULL, "Argument file giving extra arguments."},
    {"-adcdev", ARG_STRING, NULL, "Name of audio device to use for input."},
    {"-infile", ARG_STRING, NULL, "Audio file to transcribe."},
    {"-inmic", ARG_BOOLEAN, "no", "Transcribe audio from microphone."},
    {"-time", ARG_BOOLEAN, "no", "Print word times in file transcription."},
    CMDLN_EMPTY_OPTION
};

int
main(int argc, char *argv[])
{
	//ps_decoder_t *ps = NULL;
	//cmd_ln_t *config = NULL;
	char const *cfg_argfile, *cfg_infile;
	bool cfg_inmic;
	char sTmp[255];

	sprintf(sTmp,"\n (Reconocimiento Voz) !!!Reconocimiento de voz con pocketsphinx!!!");
	trace (sTmp);
	sprintf(sTmp,"\n (Reconocimiento Voz) Directorio de ejecucion del programa: ");
	trace (sTmp);

	// Configuración en función de los argumentos de entrada
	config = cmd_ln_parse_r(NULL, cont_args_def, argc, argv, TRUE);

	/* Handle argument file as -argfile. */
	/* Identificador de archivo como argumento -argfile. */
//	cfg_argfile = cmd_ln_str_r(config, "-argfile");
//	if (config && cfg_argfile != NULL) {
//		config = cmd_ln_parse_file_r(config, cont_args_def, cfg_argfile, FALSE);
//	}

//	cfg_infile = cmd_ln_str_r(config, "-infile");
//	cfg_inmic = cmd_ln_boolean_r(config, "-inmic");
//    if (config == NULL || (cfg_infile == NULL && cfg_inmic == FALSE)) {
//    	cout << "Specify '-infile <file.wav>' to recognize from file or '-inmic yes' "
//    			"to recognize from microphone.\n";
//    	E_INFO("Specify '-infile <file.wav>' to recognize from file or '-inmic yes' "
//			"to recognize from microphone.\n");
//        cmd_ln_free_r(config);
//        return 1;
//    }

	trace ("\n\r");
	return 0;
}
